---
alwaysApply: true
description: Guidelines and best practices for building Convex projects, including database schema design, queries, mutations, and real-world examples
---

# Workout Companion App

A Next.js workout tracking application with Convex backend for real-time data management.

## Setup Commands

- Install dependencies: `bun install` or `bun install`
- Linting: `bun run lint`
- Formatting: `bun run format`
- The user has the app open most of the time while using agents. You do not need to regen types

## Tech Stack

- **Frontend**: Next.js 15, React 19, TypeScript, Tailwind CSS
- **Backend**: Convex (real-time database and functions)
- **UI**: Radix UI components, Lucide React icons
- **Styling**: Tailwind CSS with custom components and ShadCN

## Code Style

- Always use functional React components (no class components)
- Follow Convex function guidelines for backend operations
- Use TypeScript strict mode
- Follow Next.js 15 app router conventions
- Shadcn and reusable base ui only components go under components/ui, application reusable components go under /components
- Always use the richer use query from convex: We set it up in /hooks/useQueryWithStatus

## Development Workflow

1. Run `npm run dev` to start both frontend and backend
2. Frontend runs on `http://localhost:3000`
3. Backend Convex dashboard available during development
4. Use Convex dev tools for debugging database queries

## Project Structure

- `/app` - Next.js app router pages
- `/components` - Reusable React components
- `/convex` - Convex backend functions and schema
- `/lib` - Utility functions and shared code

## Convex Guidelines

- Use new function syntax for all Convex functions
- Always include argument and return validators
- Follow file-based routing for function organization
- Use proper indexes for database queries
